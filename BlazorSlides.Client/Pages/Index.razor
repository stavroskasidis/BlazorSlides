@page "/"
@page "/{CurrentSlide:int}"

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IMarkdownService markdownService
@inject IInteropService interopService

<div class="slides-container slides-container--centered">
    @currentSlideContents
</div>

@functions{
    [Parameter] public int CurrentSlide { get; set; }
    protected MarkupString currentSlideContents;
    protected int slidesCount = 0;

    protected override async Task OnInitializedAsync()
    {
        slidesCount = await httpClient.GetJsonAsync<int>("api/Slides/Count");
        interopService.OnDocumentKeyUp += OnDocumentKeyUp;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(CurrentSlide == 0)
        {
            CurrentSlide = 1;
        }
        
        await LoadCurrentSlide();
    }

    protected void OnDocumentKeyUp(int keyCode)
    {
        switch (keyCode)
        {
            case 39: //right
            case 32: //space
                if (CurrentSlide < slidesCount)
                {
                    CurrentSlide++;
                    navigationManager.NavigateTo($"/{CurrentSlide}");
                }
                break;
            case 37: //left
                if (CurrentSlide > 1)
                {
                    CurrentSlide--;
                    navigationManager.NavigateTo($"/{CurrentSlide}");
                }
                break;
        }
    }

    protected async Task LoadCurrentSlide()
    {
        var response = await httpClient.GetAsync($"api/Slides/{CurrentSlide}");
        if (response.StatusCode != System.Net.HttpStatusCode.NotFound)
        {
            currentSlideContents = (MarkupString)markdownService.MarkdownToHtml(await response.Content.ReadAsStringAsync());
            StateHasChanged();
        }
    }
}