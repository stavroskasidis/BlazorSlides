@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using Markdig;

<div class="slides-container slides-container--centered">
    @currentSlideContents
</div>

@functions {

    protected int currentSlide = 1;
    protected MarkupString currentSlideContents;
    protected int slidesCount = 0;

    protected override async Task OnInitAsync()
    {
        await LoadCurrentSlide();
        slidesCount = await httpClient.GetJsonAsync<int>("api/Slides/Count");
    }

    protected override async Task OnAfterRenderAsync()
    {
        await jsRuntime.InvokeAsync<object>("SetContainterInstance", new DotNetObjectRef(this));
    }

    [JSInvokable]
    public async Task InteropKeyUp(int keyCode)
    {
        switch (keyCode)
        {
            case 39: //right
                if (currentSlide < slidesCount)
                {
                    currentSlide++;
                    await LoadCurrentSlide();
                }
                break;
            case 37: //left
                if (currentSlide > 1)
                {
                    currentSlide--;
                    await LoadCurrentSlide();
                }
                break;
        }

    }

    protected async Task LoadCurrentSlide()
    {
        var response = await httpClient.GetAsync($"api/Slides/{currentSlide}");
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            //DO NOTHING OR WHATEVER
        }
        else
        {
            currentSlideContents = (MarkupString)Markdown.ToHtml(
                markdown: await response.Content.ReadAsStringAsync(),
                pipeline: new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()
            );

            StateHasChanged();
        }
    }
}